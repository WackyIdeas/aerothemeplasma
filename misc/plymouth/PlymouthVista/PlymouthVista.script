// PlymouthVista
// bootlegacy.sp
// Defines the standard Vista (graphicsmodedisabled yes) boot screen class

fun LegacyBootScreenNew() {
	local.self = [];
	
	self.BaseSprite = Sprite();
	self.ProgressSprite = Sprite();

	self.BaseImage = Image("base.png");
	self.ProgressImage = Image("progress.png");

	self.State = "fadein";
	self.Opacity = 0;
	self.FadeSteps = 15;

	// I could directly use the screen width & height here, but
	// I want to follow the pattern of using the scale factors.
	self.BaseScaledWidth = self.BaseImage.GetWidth() * ScaleFactorX;
	self.BaseScaledHeight = self.BaseImage.GetHeight() * ScaleFactorY;

	self.ProgressScaledWidth = self.ProgressImage.GetWidth() * ScaleFactorX;
	self.ProgressScaledHeight = self.ProgressImage.GetHeight() * ScaleFactorY;

	self.BaseImageScaled = self.BaseImage.Scale(self.BaseScaledWidth, self.BaseScaledHeight);
	self.ProgressImageScaled = self.ProgressImage.Scale(self.ProgressScaledWidth, self.ProgressScaledHeight);

	self.BaseSprite.SetImage(self.BaseImageScaled);
	self.BaseSprite.SetOpacity(0);
	self.BaseSprite.SetZ(1);

	// Progress co-ordinate stuff
	self.ProgressOriginX = 234 * ScaleFactorX;
	self.ProgressReturnX = (234 + (18 * 8)) * ScaleFactorX;
	self.ProgressCurrentX = self.ProgressOriginX;
	self.ProgressStepX = 8 * ScaleFactorX;
	self.ProgressY = 354 * ScaleFactorY;

	self.ProgressSprite.SetImage(self.ProgressImageScaled);
	self.ProgressSprite.SetOpacity(0);
	self.ProgressSprite.SetZ(0);
	self.ProgressSprite.SetX(self.ProgressCurrentX);
	self.ProgressSprite.SetY(self.ProgressY);
	
	fun Update(self) {
		// What state are we in?
		if (self.State == "fadein") {
			// Fade in, let's increment our opacity
			self.Opacity += (1 / self.FadeSteps);
			
			if (self.Opacity >= 1) {
				self.State = "progress";
				self.Opacity = 1;
			}
			
			self.BaseSprite.SetOpacity(self.Opacity);
		}
		if (self.State == "progress") {
			// Progress, let's increment the position of the progress dots
			self.ProgressSprite.SetOpacity(1);
			self.ProgressCurrentX += self.ProgressStepX;
			self.ProgressSprite.SetX(self.ProgressCurrentX);
			
			if (self.ProgressCurrentX > self.ProgressReturnX) {
				self.ProgressCurrentX = self.ProgressOriginX;
			}
		}
	}

	self.Update = Update;
	
	return self;
}
// PlymouthVista
// boot7.sp
// Defines Windows 7 style boot screen class

fun SevenBootScreenNew(status) {
    local.self = [];

    scaleX = global.GlobalWidth / 1024;
    scaleY = global.GlobalHeight / 768;

    self.CopyrightText = Image.Text(global.CopyrightText, 0.5, 0.5, 0.5, 1, "Segoe UI 11");
    self.ScaledCopyright = self.CopyrightText.Scale(self.CopyrightText.GetWidth() * scaleX, self.CopyrightText.GetHeight() * scaleY);
    self.CopyrightSprite = Sprite();
    self.CopyrightSprite.SetImage(self.ScaledCopyright);
    self.CopyrightSprite.SetOpacity(0);

    self.CopyrightTextX = (global.GlobalWidth - self.ScaledCopyright.GetWidth()) / 2;
    self.CopyrightTextY = 718 * scaleY;
    
    self.CopyrightSprite.SetX(self.CopyrightTextX);
    self.CopyrightSprite.SetY(self.CopyrightTextY);

    text = "";
    if (status == "resume") {
        text = global.ResumingText;
    }
    else if (status == "boot") {
        text = global.StartingText;
    }
    else {
        text = "I'm watching you.";
    }

    self.MainText = Image.Text(text, 1, 1, 1, 1, "Segoe UI 18");
    self.ScaledMainText = self.MainText.Scale(self.MainText.GetWidth() * scaleX, self.MainText.GetHeight() * scaleY);
    self.MainTextSprite = Sprite();
    self.MainTextSprite.SetImage(self.ScaledMainText);
    self.MainTextSprite.SetOpacity(0);

    self.MainTextX = (global.GlobalWidth - self.ScaledMainText.GetWidth()) / 2;
    self.MainTextY = 523 * scaleY;

    self.MainTextSprite.SetX(self.MainTextX);
    self.MainTextSprite.SetY(self.MainTextY);

    for (i = 0; i < 105; i++) {
        flagImage = Image("flag" + i + ".png");
        flagImageScaled = flagImage.Scale(flagImage.GetWidth() * scaleX, flagImage.GetHeight() * scaleY);
        flagSprite = Sprite();
        flagSprite.SetImage(flagImageScaled);
        flagSprite.SetOpacity(0);
        flagSprite.SetX(self.MainTextX);
        flagSprite.SetY(self.MainTextY - self.ScaledMainText.GetHeight() - flagImageScaled.GetHeight());
        self.Flags[i] = flagSprite;
    }

    self.Current = 0;
    self.LastStep = 0;

    fun Update(self) {
        if (self.Current == 0) {
            self.CopyrightSprite.SetOpacity(1);
            self.MainTextSprite.SetOpacity(1);
            self.Flags[0].SetOpacity(1);
        }
        else {
            self.Flags[self.LastStep].SetOpacity(0);
            self.Flags[self.Current].SetOpacity(1);
        }

        self.LastStep = self.Current;
        if (self.Current == 104) {
            self.Current = 60;
        }
        else {
            self.Current++;
        }

    }

    self.Update = Update;

    return self;
}// bootmgr.sp
// Boot manager screen creation

// Original specs:
// Boot manager has offset width = 32 px and height = 9 px each side for rect and text.
// Resolution is 1024*768
// White rectangle height is 30 px
// Text: Lucida Console and 13 px size
// Gray box color is 191 191 191 (RGB)
// max length 74
// max row 22

// question must be a single line!
fun BootManagerNew(title, message, question) {
    local.self = [];

    self.ScaleX = GlobalWidth / 1024;
    self.ScaleY = GlobalHeight / 768;

    self.Background = Image("native_bg.png").Scale(GlobalWidth, GlobalHeight);
    self.BackgroundSprite = Sprite();
    self.BackgroundSprite.SetImage(self.Background);
    self.BackgroundSprite.SetZ(20);

    self.TopRect = Image("rect.png").Scale(GlobalWidth - (64 * self.ScaleX), 30 * self.ScaleY);
    self.TopRectSprite = Sprite();
    self.TopRectSprite.SetImage(self.TopRect);
    self.TopRectSprite.SetZ(21);
    self.TopRectSprite.SetX(32 * self.ScaleX);
    self.TopRectSprite.SetY(9 * self.ScaleY);

    self.BottomRect = Image("rect.png").Scale(GlobalWidth - (64 * self.ScaleX), 30 * self.ScaleY);
    self.BottomRectSprite = Sprite();
    self.BottomRectSprite.SetImage(self.TopRect);
    self.BottomRectSprite.SetZ(21);
    self.BottomRectSprite.SetX(32 * self.ScaleX);
    self.BottomRectSprite.SetY(GlobalHeight - (self.BottomRect.GetHeight() + 9 * self.ScaleY));

    self.ScaledPixel = (13 * self.ScaleX + 20 * self.ScaleY) / 2;

    self.Title = Image.Text(title, 0, 0, 0, 1, "Lucida Console " + self.ScaledPixel);
    self.TitleSprite = Sprite();
    self.TitleSprite.SetImage(self.Title);
    self.TitleSprite.SetZ(22);
    self.TitleSprite.SetX((GlobalWidth - self.Title.GetWidth()) / 2);
    self.TitleSprite.SetY(9 * self.ScaleY * 3 / 2);

    self.EnterText = Image.Text("ENTER - Continue", 0, 0, 0, 1, "Lucida Console " + self.ScaledPixel);
    self.EnterTextSprite = Sprite();
    self.EnterTextSprite.SetImage(self.EnterText);
    self.EnterTextSprite.SetX(41 * self.ScaleX);
    self.EnterTextSprite.SetY(GlobalHeight - (self.BottomRect.GetHeight() + 9 * self.ScaleY / 2));
    self.EnterTextSprite.SetZ(22);

    messageText = TextWrapper(message, 74, 17);

    self.MessageText = Image.Text(messageText, 1, 1, 1, 1, "Lucida Console " + self.ScaledPixel);
    self.MessageTextSprite = Sprite();
    self.MessageTextSprite.SetImage(self.MessageText);
    self.MessageTextSprite.SetX(32 * self.ScaleX);
    self.MessageTextSprite.SetY(41 * self.ScaleY);
    self.MessageTextSprite.SetZ(22);

    self.AnswerBox = Image.Text(question + "\n[" + CreateMany(" ", 65) + "]", 1, 1, 1, 1, "Lucida Console " + self.ScaledPixel);
    self.AnswerBoxSprite = Sprite();
    self.AnswerBoxSprite.SetImage(self.AnswerBox);
    self.AnswerBoxSprite.SetX(32 * self.ScaleX);
    self.AnswerBoxSprite.SetY(41 * self.ScaleY + self.ScaledPixel + self.MessageText.GetHeight());
    self.AnswerBoxSprite.SetZ(22);

    self.BulletSprite = Sprite();

    fun UpdateBullets(self, bulletCount) {
        bulletString = "";
        for (i = 0; i < bulletCount; i++) {
            if (i == 64) {
                break;
            }

            bulletString += "*";
        }

        image = Image.Text(bulletString, 1, 1, 1, 1, "Lucida Console " + self.ScaledPixel);
        self.BulletSprite.SetImage(image);
        self.BulletSprite.SetX(32 * self.ScaleX + self.ScaledPixel);
        self.BulletSprite.SetY(41 * self.ScaleY + 5 / 2 * self.ScaledPixel + self.MessageText.GetHeight());
        self.BulletSprite.SetZ(23);
    }

    fun UpdateAnswer(self, text) {
        length = text.Length();
        if (length > 60) {
            text = text.SubString(0, 59);
        }

        image = Image.Text(text, 1, 1, 1, 1, "Lucida Console " + self.ScaledPixel);
        self.BulletSprite.SetImage(image);
        self.BulletSprite.SetX(32 * self.ScaleX + self.ScaledPixel);
        self.BulletSprite.SetY(41 * self.ScaleY + 5 / 2 * self.ScaledPixel + self.MessageText.GetHeight());
        self.BulletSprite.SetZ(23);
    }

    self.UpdateBullets = UpdateBullets;
    self.UpdateAnswer = UpdateAnswer;

    return self;
}// plymouth_config.sp
// Plymouth theme configuration

// DO NOT MODIFY THIS SECTION ESPECIALLY IF YOU ARE USING "global.Pref = 1".
// AVAILABLE VALUES ARE EITHER "sddm" AND "desktop"
// ssdm - No fade
// desktop - Fade
# START_USED_BY_SERVICE
global.OsState = "desktop";
# END_USED_BY_SERVICE

// DO NOT MODIFY THIS SECTION,
// THIS SECTION IS MANAGED BY A SYSTEMD SERVICE (which will be available soon...)
# START_USED_BY_LOGOFF
global.SpawnFakeLogoff = 0;
# END_USED_BY_LOGOFF

// !START OF THE MODIFIABLE SECTION

// 1 - use service
// 2 - always fade
// anything else - never fade

# START_USED_BY_INSTALL_SCRIPT_PREF
global.Pref = 1;
# END_USED_BY_INSTALL_SCRIPT_PREF

// You can configure Fake logon screen by managing that systemd service!
// Any value for using that fake logoff screen here won't make sense.

// Title of the password screen, must be a single line and maximum 74 lengths is allowed!
// Defaults to "Windows Boot Manager"
global.PasswordTitle = "Windows Boot Manager";

// Message of the password screen. 
// Default is "" which will write boot messages instead.
global.OverriddenPasswordMessage = "";

// Password text of the password screen. must be a single line text.
global.PasswordText = "Password";

// Title of the answer screen, must be a single line and maximum 74 lengths is allowed!
global.AnswerTitle = "Windows Boot Manager";

// Message of the question screen. 
// Default is "" which will write boot messages instead.
global.OverriddenAnswerMessage = "";

// Password text of the answer screen. must be a single line text.
// Default is "Password"
global.AnswerText = "Password";

// Shutdown screen text
// Defaults to "Shutting Down..."
global.ShutdownText = "Shutting down...";

// Reboot screen text
// Default to "Rebooting..."
// Windows 7 & Vista displays "Shutting Down..." instead but I think it would be better if it says "Rebooting..." instead.
global.RebootText = "Rebooting...";

// Fake logoff screen text
// Defaults to "Logging off..."
global.LogoffText = "Logging off...";

// Use Vista boot which is available even on Windows 11.
// 1 - Use Vista boot screen
// 0 - Use 7 boot screen
global.UseLegacyBootScreen = 0;

// Add shadow effect to shutdown screen text.
// Set this to true for Windows 7 experience.
global.UseShadow = true;

// Change the background of the shutdown screen.
// vista - Use Vista background and branding.
// 7 - Use 7 background and branding.
global.AuthuiStyle = "7";

// Displayed text screen when system is booting using Windows 7 boot screen.
// Defaults to "Starting Windows"
global.StartingText = "Starting Windows";

// Displayed text screen when system is resuming using Windows 7 boot screen.
// Defaults to "Resuming Windows";
global.ResumingText = "Resuming Windows";

// Copyright text of Windows 7 boot screen
// Defaults to "© Microsoft Corporation"
global.CopyrightText = "© Microsoft Corporation";

// You can modify Windows 7 boot screen values if you want to do something like Free Ware Sys Starting Windows 9 or something like that...

// !END OF THE MODIFIABLE SECTION

fun ReadOsState() {
    if (global.Pref == 1) {
        if (global.SpawnFakeLogoff) {
            // Logoff screen will spawn only when user is logging off, 
            // We can safely ignore this because it will return to value 'sddm' when we logoff.
            // Use global.Pref to configure this.
            return "desktop";
        }
        
        return global.OsState;
    }
    else if (global.Pref == 2) {
        return "desktop";
    }
    else {
        return "sddm";
    }
}// stringutils.sp

fun TextWrapper(text, wrapLine, lineLimiter) { 

    local.requestedText = "";
    length = text.Length();

    currentLineLength = 0;
    lines = 1;
    for (i = 0; i < length; i++) {
        currentChar = text.CharAt(i);

        if (lines <= lineLimiter) {
            if (currentChar == "\n") {
                currentLineLength = 0;
                lines++;
                requestedText += currentChar;
            }
            else if (currentChar == " " && currentLineLength + 1 >= wrapLine) {
                currentLineLength = 0;
                lines++;
                requestedText += "\n";
            }
            else {
                requestedText += currentChar;
                currentLineLength++;
            }
        }
        else {
            requestedText += "...";
            break;
        }

    }

    return requestedText;
}

fun CreateMany(char, times) {
    text = "";
    for (i = 0; i <= times; i++) {
        text += char;
    }

    return text;
}// PlymouthVista
// Shutdown screen.

fun ShutdownScreenNew(text) {
    local.self = [];

    self.BaseSprite = Sprite();
    self.BaseImage = Image("authui_" + global.AuthuiStyle + ".png");

    self.ScaledX = self.BaseImage.GetWidth() * ScaleFactorXAuthui;
    self.ScaledY = self.BaseImage.GetHeight() * ScaleFactorYAuthui;

    self.BaseImageScaled = self.BaseImage.Scale(self.ScaledX, self.ScaledY);

    self.BaseSprite.SetImage(self.BaseImageScaled);
    self.BaseSprite.SetOpacity(0);
    self.BaseSprite.SetZ(1);

    self.BrandingSprite = Sprite();
    self.BrandingImage = Image("branding_" + global.AuthuiStyle + ".png");
    self.BrandingSprite.SetImage(self.BrandingImage);

    // does scaling matter?
    self.BrandingSprite.SetOpacity(0.0);
    self.BrandingSprite.SetZ(2);

    self.BrandingSprite.SetX((GlobalWidth - self.BrandingImage.GetWidth()) / 2);
    self.BrandingSprite.SetY(GlobalHeight - self.BrandingImage.GetHeight() - 23);

    self.Text = Image.Text(text, 1, 1, 1, 1, "Segoe UI 17");
    self.TextSprite = Sprite();
	self.TextSprite.SetImage(self.Text);

    self.TextX = (GlobalWidth - self.Text.GetWidth()) / 2 + 36;
    self.TextY = (GlobalHeight - self.Text.GetHeight()) / 2;

	self.TextSprite.SetOpacity(0);
	self.TextSprite.SetZ(3);
    self.TextSprite.SetX(self.TextX);
    self.TextSprite.SetY(self.TextY);

    self.ShadowSprites = [];
    // Please don't kill me because of this, Plymouth really needs it.
    if (global.UseShadow == true) {
        // TODO : Add shadow
    }

    for (i = 0; i < 18; i++) {
        imageSpinner = Image("spinner_" + i + ".png");
        sprite = Sprite();
        sprite.SetImage(imageSpinner);
        sprite.SetOpacity(0);
        sprite.SetZ(10);

        sprite.SetX(self.TextX - 28);
        sprite.SetY((GlobalHeight - imageSpinner.GetHeight()) / 2);

        self.Spinners[i] = sprite;
    }

    self.SpinnerStep = 0;
    self.LastSpinner = 17;

    self.FadedOpacity = 0;
    self.Updating = true;
    self.DelaySteps = 10000;
    self.CurrentDelayStep = 0;
    self.FadeSteps = 18;

    fun UpdateFade(self) {
        if (self.Updating == true) {
            self.FadedOpacity += (1 / self.FadeSteps);
        }

        if (self.FadedOpacity >= 1) {
            self.Updating = false;
            self.FadedOpacity = 1;
        }

        self.SetBackgroundOpacity(self, self.FadedOpacity);
        self.SetTextOpacity(self, self.FadedOpacity);
        self.DrawSpinners(self, self.FadedOpacity);
    }

    fun UpdateDelayed(self) {
        self.SetBackgroundOpacity(self, 1);
        self.CurrentDelayStep++;

        if (self.CurrentDelayStep >= self.DelaySteps) {
            self.Updating = false;
        }

        if (self.Updating == false) {
            self.SetTextOpacity(self, 1);
            self.DrawSpinners(self, 1);
        }
    }

    fun SetBackgroundOpacity(self, opaque) {
        self.BaseSprite.SetOpacity(opaque);
        self.BrandingSprite.SetOpacity(opaque);
    }

    fun SetTextOpacity(self, opaque) {
        self.TextSprite.SetOpacity(opaque);
        if (global.UseShadow == true) {
            // TODO : Add Shadow...
        }
    }

    fun DrawSpinners(self, opaque) {
        currentStep = self.Spinners[self.SpinnerStep];
        currentStep.SetOpacity(opaque);
        
        lastStep = self.Spinners[self.LastSpinnerStep];
        lastStep.SetOpacity(0);

        self.LastSpinnerStep = self.SpinnerStep;

        if (self.SpinnerStep >= 17) {
            self.SpinnerStep = 0;
        }
        else {
            self.SpinnerStep += 1;
        }
    }

    self.UpdateFade = UpdateFade;
    self.UpdateDelayed = UpdateDelayed;
    self.SetBackgroundOpacity = SetBackgroundOpacity;
    self.SetTextOpacity = SetTextOpacity;
    self.DrawSpinners = DrawSpinners;

    return self;
}// PlymouthVista
// Plymouth theme to emulate the Windows Vista and 7 boot sequences and shutdown sequences.
// 
// Distributed images are owned by Microsoft Corporation!
// 
// "Windows Vista" is a registered trademark of Microsoft Corporation.
// The author(s) of this software are in no way affiliated with or endorsed by Microsoft Corporation,
// in any capacity. This project is a fan-made labor of love that sees NO PROFITS WHATSOEVER, donations or otherwise.
//
// "Windows 7" is a registered trademark of Microsoft Corporation.
// The author(s) of this software are in no way affiliated with or endorsed by Microsoft Corporation,
// in any capacity. This project is a fan-made labor of love that sees NO PROFITS WHATSOEVER, donations or otherwise.

Window.SetBackgroundColor(0, 0, 0);

global.GlobalWidth = Window.GetWidth();
global.GlobalHeight = Window.GetHeight();

global.ScaleFactorX = Window.GetWidth() / 640;
global.ScaleFactorY = Window.GetHeight() / 480;

global.ScaleFactorXAuthui = Window.GetWidth() / 1920;
global.ScaleFactorYAuthui = Window.GetHeight() / 1200;

BootManager = 0;
BootScreen = 0;
ShutdownScreen = 0;

fun RefreshCallback() {
	if (BootManager == 0) {
		if (Plymouth.GetMode() == "boot" || Plymouth.GetMode() == "resume") {
			BootScreen.Update(BootScreen);
		}
		else if (Plymouth.GetMode() == "shutdown" || Plymouth.GetMode() == "reboot") {
			if (ReadOsState() == "sddm") {
				ShutdownScreen.UpdateDelayed(ShutdownScreen);
			}
			else {
				ShutdownScreen.UpdateFade(ShutdownScreen);
			}
		}
	}
}

fun ShowQuestionDialog(prompt, contents) {
	if (BootManager == 0) {
		val = 0;
		if (global.OverriddenAnswerMessage != "") {
			val = global.OverriddenAnswerMessage;
		}
		else {
			val = prompt;
		}
		BootManager = BootManagerNew(global.AnswerTitle, prompt, global.AnswerText);
	}
	else {
		BootManager.UpdateAnswer(BootManager, contents);
	}
}

fun ShowPasswordDialog(prompt, bulletCount) {
	if (BootManager == 0) {
		val = 0;
		if (global.OverriddenPasswordMessage != "") {
			val = global.OverriddenPasswordMessage;
		}
		else {
			val = prompt;
		}
		BootManager = BootManagerNew(global.PasswordTitle, val, global.PasswordText);
	}
	else {
		BootManager.UpdateBullets(BootManager, bulletCount);
	}

}

fun ReturnNormal() {
    if (Plymouth.GetMode() == "boot" || Plymouth.GetMode() == "resume") {
		if (global.UseLegacyBootScreen) { // I will say this multiple times, please don't kill me. This is really needed!
			BootScreen = LegacyBootScreenNew();
		}
		else {
			BootScreen = SevenBootScreenNew(Plymouth.GetMode());
		}
		
		Plymouth.SetRefreshRate(12);

    }
    else if (Plymouth.GetMode() == "shutdown") {
		text = "";
		if (global.SpawnFakeLogoff) {
			text = global.LogoffText;
		}
		else {
			text = global.ShutdownText;
		}

	    ShutdownScreen = ShutdownScreenNew(text);
	    Plymouth.SetRefreshRate(30);
    }
    else if (Plymouth.GetMode() == "reboot") {
	    ShutdownScreen = ShutdownScreenNew(global.RebootText);
	    Plymouth.SetRefreshRate(30);
    }

	if (BootManager != 0) {
		BootManager = 0;
	}

	Plymouth.SetRefreshFunction(RefreshCallback);
}

Plymouth.SetDisplayNormalFunction(ReturnNormal);
Plymouth.SetDisplayQuestionFunction(ShowQuestionDialog);
Plymouth.SetDisplayPasswordFunction(ShowPasswordDialog);
